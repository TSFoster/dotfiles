#!/usr/bin/env zsh

set -ue

CONFIG="$HOME/.config"
DATA="$HOME/.local/share"
LBIN="$HOME/.local/bin"
mkdir -p "$DATA"
mkdir -p "$LBIN"


# Helper functions
# Check if given command is executable
exists () { type "$1" >/dev/null 2>/dev/null }


# Set theme file (light/dark)
[ -f "$CONFIG/theme" ] || echo 'light' > "$CONFIG/theme"
THEME="$(cat "$CONFIG/theme")"


# Put OS type in $OS
OS="$($CONFIG/meta/bin/os_name)"
# Warn about incompleteness of script for non-macOS systems
[ "$OS" = 'Mac' ] || echo "This is not a Mac! Skipping some sections of this script. Some other assumptions about available tools may be incorrect.\n"


# Check command line tools installed
if [ "$OS" = 'Mac' ] && [ ! -d "$(xcode-select --print-path 2> /dev/null)" ]; then
  echo "Installing command line tools (GUI popup should appear)…\n"
  xcode-select --install
  read "?Press any key once tools are installed. "
fi


# Install homebrew and applications
if [ "$OS" = 'Mac' ]; then
  if ! exists brew; then
    echo "Installing homebrew…"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    echo "\n"
  fi

  brew update

  echo "\n"

  echo "Installing CLI apps…\n"
  brew bundle --file="$CONFIG/meta/Brewfile"
  read "INSTALL_GUI?Install GUI apps too (y/n)? "
  [ "$INSTALL_GUI" = "y" ] && brew bundle --file="$CONFIG/meta/apps.Brewfile"
else
  echo "Skipping automatic installation of packages."
fi

echo "\n"

for url (
  https://raw.githubusercontent.com/dcreemer/1pass/master/1pass
  https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh
  https://raw.githubusercontent.com/fivestars/docker-machine-ipconfig/master/docker-machine-ipconfig
); do
  exe="$(echo "$url" | sed 's/^.*\///')"
  curl -s "$url" > "$CONFIG/meta/$exe.temp"
  if [ ! -x "$LBIN/$exe" ]; then
    echo "Installing $exe…"
  else
    if ! diff -q "$LBIN/$exe" "$CONFIG/meta/$exe.temp"; then
      echo "Updating $exe…"
    fi
  fi
  mv "$CONFIG/meta/$exe.temp" "$LBIN/$exe"
  chmod +x "$LBIN/$exe"
done

echo "\n"

if [ "$OS" = 'Mac' ]; then
  SOUNDS="$HOME/Library/Sounds"
  echo "Installing sounds…"
  sudo mkdir -p "$SOUNDS"
  sudo chown "$USER" "$SOUNDS"
  for f in "$CONFIG/meta/sounds/"*.aif; do
    cp -f "$f" "$SOUNDS/$(basename "$f")"
  done
  echo "\n"
fi

# Set up node
echo "Setting up node…\n"
npm update -g
packages=(
  eslint
  fkill-cli
  fsevents
  git-open
  hostile
  htmlhint
  machine-share
  ndb
  node-gyp
  now
  postcss
  prettier
  svgo
  tern
  tldr
  uglify-js
  yo
)
npm install --global "${packages[@]}"
[ "$OS" = 'Mac' ] && npm install --global alfred-fkill

echo "\n"

# Set up elm
echo "Setting up elm…\n"
packages=(
  elm
  elm-analyse
  elm-format
  elm-github-install
  elm-help
  elm-live
  elm-oracle
  elm-test
)
npm install --global "${packages[@]}"

echo "\n"

touch "$HOME/.hushlogin"
if exists fish; then
  # Set fish as default shell
  FISH_LOCATION="$(which fish)"
  if ! grep -q "^$FISH_LOCATION\$" /etc/shells; then
    echo "Fish is installed but not on available shells list. Adding and making default …"
    echo "$FISH_LOCATION" | sudo tee -a /etc/shells
    chsh -s "$FISH_LOCATION"
  else
    echo "Fish is already on available shells list. If not already default, please run: chsh -s $FISH_LOCATION"
  fi

  echo "\n"

  # Install Oh My Fish
  if ! [ -d "$DATA/omf" ]; then
    echo "Installing Oh My Fish (you will need to hit Ctrl+D once installed)…"
    fish <(curl -L https://get.oh-my.fish) --config="$CONFIG/omf" --path="$DATA/omf"
  fi

  FISHER_FILE="$CONFIG/omf/functions/fisher.fish"
  if ! [ -f "$FISHER_FILE" ]; then
    echo "Downloading fisher…"
    curl -L https://git.io/fisher > "$FISHER_FILE"
    echo ""
  fi
  echo "Installing fisherman plugins…\n"
  fish -c 'fisher'

  echo "\n"

  echo "Setting fish universal variables…\n"
  fish -c 'set -U FZF_LEGACY_KEYBINDINGS 0'
  fish -c 'set -U theme_display_ruby no'
  fish -c 'set -U theme_display_date no'
  fish -c 'set -U theme_display_cmd_duration no'
  fish -c 'set -U theme_nerd_fonts yes'

else
  echo "Warning: Fish is not installed!"
fi

echo "\n"

# Set up git
echo "Setting up git…\n"
[ "$OS" = 'Mac' ] && ! exists gittower && echo 'gittower still needs to be installed (you can do this from the app’s preferences)'
[ -f "$CONFIG/git/credentials.gitconfig" ] || touch "$CONFIG/git/credentials.gitconfig"

echo "\n"

# Set up neovim
echo "Setting up neovim…\n"
mkdir -p "$DATA/nvim/sessions"
exists pip3 && pip3 install neovim && pip3 install neovim-remote
exists pip2 && pip2 install neovim
packages=(
  neovim
  dockerfile-langauge-server-nodejs
  bash-language-server
  yaml-language-server
)
npm install --global "${packages[@]}"
[ -f "$DATA/nvim/site/autoload/plug.vim" ] || curl -fLo "$DATA/nvim/site/autoload/plug.vim" --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
[ -d "$DATA/nvim/plugged" ] || nvim +PlugInstall

echo "\n"

# Set up Go
mkdir -p "$DATA/go"
go get -u github.com/arial7/golorem

# Set up Hammerspoon
if [ "$OS" = 'Mac' ]; then
  echo "Setting up Hammerspoon…\n"
  defaults write org.hammerspoon.Hammerspoon MJConfigFile "$CONFIG/hammerspoon/init.lua"
  if [ ! -f "$CONFIG/maildir" ] || [ ! -d "$HOME/Library/Mail/V$(cat "$CONFIG/maildir")" ]; then
    read "reply?If you want mail integration, enter the mailbox version number, followed by a slash and the mailbox ID (e.g. 5/CFEC8F32-F1F3-4F20-FFB0-28213FC83240):"
    if [ -d "$HOME/Library/Mail/V$reply" ]; then
      echo "$reply" > $CONFIG/maildir
    else
      echo "Mail integration not set up. To configure later, run this script again"
    fi
  fi
  echo "\n"
fi

# Set up Ruby
echo "Setting up Ruby…\n"
if exists fish; then
  fish -c "set -Ux IRBRC $CONFIG/irb/irbrc" 2> /dev/null
  fish -c "set -Ux PRYRC $CONFIG/pry/pryrc" 2> /dev/null
fi
[ "$OS" = 'Mac' ] && sudo chown -R "$USER" /Library/Ruby/Gems
echo "Checking required gems are installed…\n"
GEM_INSTALLED="$(gem list)"
for pkg (
  awesome_print
  pry
  neovim
  solargraph
); do
  grep -q "^$pkg (" <(echo "$GEM_INSTALLED") \
    && echo "$pkg already installed" \
    || gem install $pkg
done

echo "\n"

# Set up Editorconfig
echo "Setting up Editorconfig…\n"
cp -f "$CONFIG/meta/editorconfig" "$HOME/.editorconfig"

# Set up lexicon
if ! exists lexicon; then
  pip3 && pip3 install dns-lexicon
fi

echo "\n"

# Set up iTerm 2
if [ "$OS" = 'Mac' ]; then
    echo "Setting up iTerm 2…\n"
    defaults write com.googlecode.iterm2 PrefsCustomFolder "$CONFIG/iterm"
    echo "\n"
fi

echo "Setting up italic fonts…\n"

tic "$CONFIG/meta/italic-fonts/xterm-256color-italic.terminfo"
fish -c 'set -q TERM; and set -e TERM; set -Ux TERM xterm-256color-italic'

echo "\n"

# Set up ctags
mkdir -p $HOME/.ctags.d
echo "--options=$CONFIG/ctags/" > $HOME/.ctags.d/config.ctags

if exists ssh-agent; then
    echo "If you have not already, ensure all SSH keys are added to your keychain"
fi
