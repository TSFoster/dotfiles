#!/usr/bin/env zsh

# Only link files if they aren't already
function link_unlinked {
  if ! [ $1 -ef $2 ]; then ln -i $1 $2; fi
}

cd $HOME

# Not interested in welcome messages
touch .hushlogin

# Ensure hidden directories in home folder exist
mkdir -p .config
mkdir -p .completion
mkdir -p .vim/bundle
mkdir -p .tmuxinator

# Approximate ln -i with directory (can't symlink, powerline won't work)
# Only ask to replace if ~/.config/powerline directory
# exists and differs (apart from .pyc files)
if [ -d ".config/powerline" ] && [ -n "$(diff -r --exclude='*.pyc' .dotfiles/powerline .config/powerline)" ]; then
  read "reply?replace powerline? "
  case $reply in
      [Yy]* ) rm -rf .config/powerline;;
      * ) echo 'not replaced';;
  esac
fi
if ! [ -d ".config/powerline" ]; then
  cp -r .dotfiles/powerline .config
fi

# Can't think of a nice way to check if ~/.vim is dirty, so just ask if you want to reinstall every time ~/.vim/bundle exists
if [ -d ".vim/bundle" ]; then
  read "reply?reinstall all vim extensions? (may take a while) "
  case $reply in
      [Yy]* ) rm -rf .vim/bundle;;
      * ) echo 'no change';;
  esac
fi
if ! [ -d ".vim/bundle" ]; then
  git clone https://github.com/gmarik/Vundle.vim.git .vim/bundle/Vundle.vim
  vim -u .dotfiles/vim/vundle.vimrc +PluginInstall +qall
fi

if ! [ -f ".completion/npm.zsh" ]; then
  npm completion > .completion/npm.zsh
fi
if ! [ -f ".completion/src/_t" ]; then
  TIMETRAPCOMPLETION=$(locate '*/timetrap*/completions/zsh/_t' | head -n 1)
  if [ -n "$TIMETRAPCOMPLETION" ]; then ln $TIMETRAPCOMPLETION .completion/src/_t; fi
fi
ZSHCOMP=.completion/zsh-completions
if ! [ -d "$ZSHCOMP" ]; then
  git clone git://github.com/zsh-users/zsh-completions.git $ZSHCOMP
fi
cd $ZSHCOMP
git pull
cd -


# Set machine-specific variables and paths
# Machine name is used when SSHing in to it
if ! [ -f ".machine.zsh" ]; then
  read "reply?Enter machine name: $(find .dotfiles/zsh/machines/*.zsh | awk 'BEGIN { FS = "[/|.]" } {printf "'%s', ", $5}')or another for a new machine: "
  file=".dotfiles/zsh/machines/${reply}.zsh"
  echo "file: $file"
  if ! [ -f $file ]; then
    read "symbol?New machine '$reply' needs a phrase or symbol to identify it (leave blank for '$reply'): "
    if ! [ -n "$symbol" ]; then symbol=$reply; fi
    printf "machineName='$symbol'" > $file
  fi
  ln $file .machine.zsh
fi

cd .dotfiles

if ! [ -f ../.machine-private.zsh ]; then
  cp zsh/machine-private.zsh ../.machine-private.zsh
fi

link_unlinked git/home.gitconfig  ../.gitconfig
link_unlinked zsh/home.inputrc    ../.inputrc
link_unlinked zsh/home.zshenv     ../.zshenv
link_unlinked zsh/home.zshrc      ../.zshrc
link_unlinked tmux/home.tmux.conf ../.tmux.conf
link_unlinked irb/home.irbrc      ../.irbrc
link_unlinked vim/home.vimrc      ../.vimrc
link_unlinked vim/scripts.vim     ../.vim/scripts.vim
for f in tmux/sessions/*.yml; do
  link_unlinked "$f" "../.tmuxinator/$(basename "$f")"
done

# If we're on a Mac
if uname | grep -q 'Darwin'; then
  mkdir -p ../Library/Scripts
  cd applescript
  for scpt in *.scpt; do
    link_unlinked "../../Library/Scripts/$scpt" "$scpt"
  done
fi
