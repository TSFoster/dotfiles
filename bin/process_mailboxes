#!/usr/bin/env osascript -l JavaScript

(function processMailboxes(app) {
	const Mail = app('Mail');
	const Things = app('Things');

	if (!Mail.running() || !Things.running()) return;

	const mailboxes = Mail.accounts.byName('Strange Bureau').mailboxes;
	const archiveMailbox = mailboxes.byName('In Things');
	const thingsInbox = Things.lists.byName('Inbox');

	getMessagesIn('Waiting')()
		.map(init)
		.map(waitingToDo)
		.map(addToDosToInbox)
		.map(archiveMessage);

	getMessagesIn('To reply')()
		.map(init)
		.map(replyToDo)
		.map(addToDosToInbox)
		.map(archiveMessage);

	getMessagesIn('INBOX', {flaggedStatus: true})()
		.map(init)
		.map(actionToDo)
		.map(addToDosToInbox)
		.map(archiveMessage);

	function init(message) {
		return {
			message: message,
			toDos: [],
		};
	}

	function waitingToDo(model) {
		const name = isSelf(model.message.sender())
			? thirdParties(model.message) + ' replied?'
			: 'Waiting on ' + thirdParties(model.message);
		return addToDo(model, {
			name: name,
			notes: makeNote(model.message),
			tagNames: ['@Waiting'],
		});
	}

	function replyToDo(model) {
		return addToDo(model, {
			name: 'Reply to ' + thirdParties(model.message),
			notes: makeNote(model.message),
			tagNames: ['Correspondence'],
		});
	}

	function actionToDo(model) {
		const fromSelf = isSelf(model.message.sender());
		return addToDo(model, {
			name: 'Action email ‘' + model.message.subject() + '’',
			notes: makeNote(model.message),
		});
	}

	function addToDo(model, toDo) {
		model.toDos.push(toDo);
		return model;
	}

	function thirdParties(message) {
		if (isSelf(message.sender())) return extractNames(message.recipients());
		return extractName(message.sender());
	}

	function isSelf(sender) {
		return /Toby Foster|<.*toby.*(millk|strangebureau|efex|tsf|mor-far)>/.test(sender);
	}

	function extractNames(recipients) {
		return recipients.map(getName).join(', ');
	}

	function extractName(sender) {
		var match = sender.match(/((.*) )?<(.*)>/);
		return match[2] || match[3];
	}

	function makeNote(message) {
		const recipients = message.recipients().map(getFullName).join(', ');
		return `
			From: ${message.sender()}
			To: ${recipients}
			Subject: ${message.subject()}
			Message ID: ${message.id()}

			message://${encodeURIComponent('<' + message.messageId() + '>')}
		`.trim().replace(/\n\t+/g,'\n');
	}

	function getName(recipient) {
		var name = recipient.name();
		if (name && name.length > 0) return name;
		return recipient.address();
	}

	function getFullName(recipient) {
		return recipient.name() + ' <' + recipient.address() + '>';
	}

	function addToDosToInbox(model) {
		model.toDos.forEach(addToDoToInbox);
		return model;
	}

	function addToDoToInbox(toDo) {
		thingsInbox.toDos.push(Things.ToDo(toDo));
	}

	function archiveMessage(model) {
		Mail.move(model.message, {to: archiveMailbox});
		return model;
	}

	function getMessagesIn(mailboxName, extraConditions = {}) {
		const conditions = Object.assign({
			deletedStatus: false,
		}, extraConditions);
		return mailboxes.byName(mailboxName).messages.where(conditions);
	}
})(Application);
